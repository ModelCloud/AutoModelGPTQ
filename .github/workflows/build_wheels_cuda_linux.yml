name: Release

defaults:
  run:
    shell: bash -le {0}
on:
  schedule:
    - cron: '0 20 * * *'
  repository_dispatch:
  workflow_dispatch:

env:
  CUDA_DEVICE_ORDER: PCI_BUS_ID
  AMD_SERVER: 10.0.13.31
  INTEL_SERVER: 10.0.23.35

concurrency:
  group: ${{ github.ref }}-workflow-release
  cancel-in-progress: true

jobs:
  check-vm:
    runs-on: self-hosted
    container:
      image: modelcloud/gptqmodel:alpine-ci-v1
    outputs:
      ip: ${{ steps.get_ip.outputs.ip }}
      tag: ${{ steps.get_ip.outputs.tag }}
      amd_list: ${{ steps.assign.outputs.amd_list }}
      intel_list: ${{ steps.assign.outputs.intel_list }}
    steps:
      - name: Select server
        id: get_ip
        run: |
          if [[ "${{ runner.name }}" == *"intel"* ]]; then
            echo "current ci is intel"
            response=0
          else
            echo "test intel vm status"
            response=$(curl --silent --fail --max-time 5 http://$INTEL_SERVER/gpu/runner/status/intel) || response=error
            if [ "$response" == "error" ]; then
              echo "test amd vm status"
              response=$(curl --silent --fail --max-time 5 http://${AMD_SERVER}/gpu/runner/status/intel) || response=error
            fi
          fi

          echo "response: $response"

          if [ "$response" == "0" ]; then
            tag="intel"
          elif [ "$response" == "-1" ]; then
            tag="amd"
          else
            echo "Error: Unexpected result - $response"
            exit 1
          fi

          echo "Runner tag: $tag"

          response=$(curl -s --head --fail --max-time 5 http://${INTEL_SERVER}/gpu/status) || response=error
          if echo "$response" | grep "200 OK" > /dev/null; then
            echo "Intel server is online. set ip to $ip"
            ip=${INTEL_SERVER}
          else
            response=$(curl -s --head --max-time 5 http://${AMD_SERVER}/gpu/status) || response=error
            if echo "$response" | grep "200 OK" > /dev/null; then
              ip=${AMD_SERVER}
              echo "AMD server is online. set ip to $ip"
            else
              echo "AMD server is offline."
              exit 1
            fi
          fi

          echo "ip=$ip" >> "$GITHUB_OUTPUT"
          echo "tag=$tag" >> "$GITHUB_OUTPUT"

          echo "tag: $tag, ip: $ip"

      - name: Assign tasks
        id: assign
        run: |
          lists=$(curl -s "http://${{ env.GPU_IP }}/gpu/runner/docker?json=1&divide=2")
          IFS=$'\n' read -r list_1 list_2 <<< "$lists"

          echo "list 1: $list_1"
          echo "list 2: $list_2"

          echo "amd_list=$list_1" >> "$GITHUB_OUTPUT"
          echo "intel_list=$list_2" >> "$GITHUB_OUTPUT"


  release-amd:
    strategy:
      fail-fast: false
      matrix:
        tag: ${{ fromJSON(needs.check-vm.outputs.amd_list) }}
      max-parallel: 2
    runs-on: [ self-hosted, amd ]
    needs: check-vm
    container:
      image: ${{ needs.check-vm.outputs.ip }}:5000/modelcloud/gptqmodel:${{ matrix.tag }}
    timeout-minutes: 25
    steps:
      - name: Print Env
        run: |
          echo "== pyenv =="
          pyenv versions
          echo "== python =="
          python --version
          echo "== nvcc =="
          nvcc --version
          echo "== torch =="
          pip show torch

      - name: Checkout Codes
        uses: actions/checkout@v4
        with:
          repository: ${{ github.event.inputs.repo }}
          ref: ${{ github.event.inputs.ref }}

      - name: Install requirements
        run: pip install -r requirements.txt -i http://${{ needs.check-vm.outputs.ip }}/simple/ --trusted-host ${{ needs.check-vm.outputs.ip }}

      - name: Compile
        run: python setup.py bdist_wheel

      - name: Test install
        run: |
          whl=$(ls -t *.whl | head -n 1)
          echo "WHL_NAME=$whl" >> $GITHUB_ENV

          twine check dist/$whl
          pip install dist/$whl

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.WHL_NAME }}
          path: dist/${{ env.WHL_NAME }}

  release-intel:
    strategy:
      fail-fast: false
      matrix:
        tag: ${{ fromJSON(needs.check-vm.outputs.intel_list) }}
      max-parallel: 2
    runs-on: [ self-hosted, intel ]
    needs: check-vm
    container:
      image: ${{ needs.check-vm.outputs.ip }}:5000/modelcloud/gptqmodel:${{ matrix.tag }}
    timeout-minutes: 25
    steps:
      - name: Print Env
        run: |
          echo "== pyenv =="
          pyenv versions
          echo "== python =="
          python --version
          echo "== nvcc =="
          nvcc --version
          echo "== torch =="
          pip show torch

      - name: Checkout Codes
        uses: actions/checkout@v4
        with:
          repository: ${{ github.event.inputs.repo }}
          ref: ${{ github.event.inputs.ref }}

      - name: Install requirements
        run: pip install -r requirements.txt -i http://${{ needs.check-vm.outputs.ip }}/simple/ --trusted-host ${{ needs.check-vm.outputs.ip }}

      - name: Compile
        run: python setup.py bdist_wheel

      - name: Test install
        run: |
          whl=$(ls -t *.whl | head -n 1)
          echo "WHL_NAME=$whl" >> $GITHUB_ENV

          twine check dist/$whl
          pip install dist/$whl

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.WHL_NAME }}
          path: dist/${{ env.WHL_NAME }}
