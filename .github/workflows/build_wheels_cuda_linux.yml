name: Release

defaults:
  run:
    shell: bash -le {0}
on:
  schedule:
    - cron: '0 20 * * *'
  repository_dispatch:
  workflow_dispatch:

env:
  CUDA_DEVICE_ORDER: PCI_BUS_ID
  AMD_SERVER: 10.0.13.31
  INTEL_SERVER: 10.0.23.35

concurrency:
  group: ${{ github.ref }}-workflow
  cancel-in-progress: true

jobs:
  check-vm:
    runs-on: self-hosted
    container:
      image: modelcloud/gptqmodel:alpine-ci-v1
    outputs:
      ip: ${{ steps.get_ip.outputs.ip }}
      tag: ${{ steps.get_ip.outputs.tag }}
    steps:
      - name: Select server
        id: get_ip
        run: |
          if [[ "${{ runner.name }}" == *"intel"* ]]; then
            echo "current ci is intel"
            response=0
          else
            echo "test intel vm status"
            response=$(curl --silent --fail --max-time 5 http://$INTEL_SERVER/gpu/runner/status/intel) || response=error
            if [ "$response" == "error" ]; then
              echo "test amd vm status"
              response=$(curl --silent --fail --max-time 5 http://${AMD_SERVER}/gpu/runner/status/intel) || response=error
            fi
          fi

          echo "response: $response"

          if [ "$response" == "0" ]; then
            tag="intel"
          elif [ "$response" == "-1" ]; then
            tag="amd"
          else
            echo "Error: Unexpected result - $response"
            exit 1
          fi

          echo "Runner tag: $tag"

          response=$(curl -s --head --fail --max-time 5 http://${INTEL_SERVER}/gpu/status) || response=error
          if echo "$response" | grep "200 OK" > /dev/null; then
            echo "Intel server is online. set ip to $ip"
            ip=${INTEL_SERVER}
          else
            response=$(curl -s --head --max-time 5 http://${AMD_SERVER}/gpu/status) || response=error
            if echo "$response" | grep "200 OK" > /dev/null; then
              ip=${AMD_SERVER}
              echo "AMD server is online. set ip to $ip"
            else
              echo "AMD server is offline."
              exit 1
            fi
          fi

          echo "ip=$ip" >> "$GITHUB_OUTPUT"
          echo "tag=$tag" >> "$GITHUB_OUTPUT"

          echo "tag: $tag, ip: $ip"

  build:
    strategy:
      fail-fast: false
      matrix:
        cuda: [ "11.8", "12.1", "12.4" ]
        torch: [ "2.0", "2.1", "2.2", "2.3", "2.4" ]
        python: [ "3.9", "3.10", "3.11" , "3.12" ]
        exclude:
          - cuda: "12.4"
            torch: "2.1"
          - cuda: "12.4"
            torch: "2.2"
          - cuda: "12.4"
            torch: "2.3"
          - torch: "2.4"
            cuda: "11.8"
          - torch: "2.4"
            cuda: "12.1"
          - torch: "2.0"
            python: "3.12"
          - torch: "2.1"
            python: "3.12"
          - torch: "2.0"
            cuda: "12.1"
          - torch: "2.0"
            cuda: "12.4"
      max-parallel: 4
    runs-on: [ self-hosted ]
    needs: check-vm
    container:
      image: ${{ needs.check-vm.outputs.ip }}:5000/modelcloud/gptqmodel:compiler_cuda${{ matrix.cuda }}-torch${{ matrix.torch }}-python${{ matrix.python }}
    steps:

      - name: Print Env
        run: |
          export PYENV_ROOT=/opt/pyenv && export PATH=$PYENV_ROOT/bin:$PATH && eval "$(pyenv init -)" && eval "$(pyenv init --path)"

          env_name="torch${{ matrix.torch }}_py${{ matrix.python }}"
          echo "env: $env_name"

          pyenv local ${{ matrix.python }} && pyenv activate $env_name && pyenv versions

          echo "========="
          python --version
          echo "========="
          nvcc --version
          echo "========="
          pip show torch

      - name: Checkout Codes
        uses: actions/checkout@v4
        with:
          repository: ${{ github.event.inputs.repo }}
          ref: ${{ github.event.inputs.ref }}

      - name: Install requirements
        run: |
          export PYENV_ROOT=/opt/pyenv && export PATH=$PYENV_ROOT/bin:$PATH && eval "$(pyenv init -)" && eval "$(pyenv init --path)"

          env_name="torch${{ matrix.torch }}_py${{ matrix.python }}"
          echo "env: $env_name"

          pyenv local ${{ matrix.python }} && pyenv activate $env_name && pyenv versions

          pip install -r requirements.txt -i http://${{ needs.check-vm.outputs.ip }}/simple/ --trusted-host ${{ needs.check-vm.outputs.ip }}

      # - name: Compile
      #   run: |
      #     export PYENV_ROOT=/opt/pyenv && export PATH=$PYENV_ROOT/bin:$PATH && eval "$(pyenv init -)" && eval "$(pyenv init --path)"

      #     env_name="torch${{ matrix.torch }}_py${{ matrix.python }}"
      #     echo "env: $env_name"

      #     pyenv local ${{ matrix.python }} && pyenv activate $env_name && pyenv versions

      #     python setup.py bdist_wheel

      # - name: List build dir
      #   run: |
      #     export PYENV_ROOT=/opt/pyenv && export PATH=$PYENV_ROOT/bin:$PATH && eval "$(pyenv init -)" && eval "$(pyenv init --path)"

      #     env_name="torch${{ matrix.torch }}_py${{ matrix.python }}"
      #     echo "env: $env_name"

      #     pyenv local ${{ matrix.python }} && pyenv activate $env_name && pyenv versions

      #     cd dist
      #     ls -alh .
      #     whl=$(ls -t *.whl | head -n 1)
      #     twine check $whl
      #     echo "WHL_NAME=$whl" >> $GITHUB_ENV

      # - name: Upload artifact
      #   uses: actions/upload-artifact@v4
      #   with:
      #     name: ${{ env.WHL_NAME }}
      #     path: dist/${{ env.WHL_NAME }}
