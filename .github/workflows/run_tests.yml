name: Unit Tests

on:
  repository_dispatch:
  workflow_dispatch:
    inputs:
      repo:
        description: 'GitHub repo {owner}/{repo}'
        required: false
        default: ''
      ref:
        description: 'Branch, Tag or Commit SHA'
        required: false
        default: ''
      test_names:
        description: 'Input Test(s) to Run (default all)'
        required: false
        default: ''

env:
  CUDA_DEVICE_ORDER: PCI_BUS_ID
  CPU_TEST_FILES: "test_qbits.py"

jobs:
  build:
    runs-on: self-hosted
    container:
      image: 10.0.13.31:5000/modelcloud/gptqmodel:github-ci-v2
    steps:
      - name: Checkout Codes
        uses: actions/checkout@v4
        with:
          repository: ${{ github.event.inputs.repo }}
          ref: ${{ github.event.inputs.ref }}

      - name: Compile
        shell: bash
        run: python setup.py bdist_wheel

      - name: Show dist folder
        run: ls -alh dist

      - name: Upload to artifact
        uses: actions/upload-artifact@v4
        with:
          name: dist
          path: dist

  list-test-files:
    runs-on: ubuntu-latest
    outputs:
      cpu-files: ${{ steps.files.outputs.cpu-files }}
      gpu-files: ${{ steps.files.outputs.gpu-files }}
    steps:
      - name: Checkout Codes
        uses: actions/checkout@v4
        with:
          repository: ${{ github.event.inputs.repo }}
          ref: ${{ github.event.inputs.ref }}

      - name: List files
        id: files
        shell: bash
        run: |
          script="
          import json
          import os

          cpu_file_list = [f.strip().removesuffix('.py') for f in '${CPU_TEST_FILES}'.split(',') if f.strip()]
          test_files_list = [f.strip().removesuffix('.py') for f in '${{ github.event.inputs.test_names }}'.split(',') if f.strip()]
          cpu_test_files = [f for f in cpu_file_list if not test_files_list or f in test_files_list]

          all_tests = [f.removesuffix('.py') for f in os.listdir('tests/') if f.startswith('test_') and f.endswith('.py')]
          gpu_test_files = [f for f in all_tests if f not in cpu_file_list and (not test_files_list or f in test_files_list)]

          print(f'{json.dumps(cpu_test_files)}|{json.dumps(gpu_test_files)}')
          "

          test_files=$(python3 -c "$script")
          IFS='|' read -r cpu_test_files gpu_test_files <<< "$test_files"
          echo "cpu-files=$cpu_test_files" >> "$GITHUB_OUTPUT"
          echo "gpu-files=$gpu_test_files" >> "$GITHUB_OUTPUT"

          echo "Test files: $test_files"
          echo "CPU Test files: $cpu_test_files"
          echo "GPU Test files: $gpu_test_files"

  test_gpu:
    needs:
      - build
      - list-test-files
    runs-on: self-hosted
    container:
      image: 10.0.13.31:5000/modelcloud/gptqmodel:github-ci-v2
    strategy:
      fail-fast: false
      max-parallel: 6
      matrix:
        test_script: ${{ fromJSON(needs.list-test-files.outputs.gpu-files) }}

    steps:
      - name: Checkout Codes
        uses: actions/checkout@v4
        with:
          repository: ${{ github.event.inputs.repo }}
          ref: ${{ github.event.inputs.ref }}

      - name: Show folder
        run: |
          ls -alh . || true
          ls -alh dist || true
          rm -rf dist/* || true

      - name: Download artifact
        uses: actions/download-artifact@v4
        with:
          name: dist
          path: dist

      - name: Show dist folder
        run: ls -alh dist || true

      - name: Install wheel
        shell: bash
        run: pip install dist/*.whl parameterized uvicorn

      - name: Check platform
        shell: bash
        run: |
          vendor=$(lscpu | grep 'Vendor ID')
          if [[ $vendor == *"Intel"* ]]; then
            ip="10.0.23.62"
          else
            ip="10.0.13.31"
          fi
          echo "GPU_IP=$ip" >> $GITHUB_ENV

      - name: Find suitable GPU
        shell: bash
        run: |
          gpu_id=-1

          while [ "$gpu_id" -lt 0 ]; do
            gpu_id=$(curl -s "http://${{ env.GPU_IP }}/gpu/get?id=${{ github.run_id }}")

            if [ "$gpu_id" -lt 0 ]; then
              echo "No available GPU, waiting 5 seconds..."
              sleep 5
            else
              echo "Allocated GPU ID: $gpu_id"
            fi
          done
          echo "CUDA_VISIBLE_DEVICES=$gpu_id" >> $GITHUB_ENV
          echo "CUDA_VISIBLE_DEVICES set to $gpu_id"

      - name: Run tests
        if: ${{ !github.event.inputs.test_names || contains(github.event.inputs.test_names, matrix.test_script) }}
        run: pytest --durations=0 tests/${{ matrix.test_script }}.py

      - name: Release GPU
        if: always()
        shell: bash
        run: curl -X GET "http://${{ env.GPU_IP }}/gpu/release?id=${{ github.run_id }}&gpu=$CUDA_VISIBLE_DEVICES"

  test_cpu:
    needs:
      - build
      - list-test-files
    runs-on: self-hosted
    container:
      image: 10.0.13.31:5000/modelcloud/gptqmodel:github-ci-v2
    strategy:
      fail-fast: false
      matrix:
        test_script:  ${{ fromJSON(needs.list-test-files.outputs.cpu-files) }}

    steps:
      - name: Checkout Codes
        uses: actions/checkout@v4
        with:
          repository: ${{ github.event.inputs.repo }}
          ref: ${{ github.event.inputs.ref }}

      - name: Download artifact
        uses: actions/download-artifact@v4
        with:
          name: dist
          path: dist

      - name: Install wheel
        shell: bash
        run: |
          pip install dist/*.whl

      - name: Run tests
        if: ${{ !github.event.inputs.test_names || contains(github.event.inputs.test_names, matrix.test_script) }}
        run: pytest --durations=0 tests/${{ matrix.test_script }}.py
