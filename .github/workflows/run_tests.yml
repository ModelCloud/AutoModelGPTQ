name: Unit Tests (GPU)

on:
  repository_dispatch:
  workflow_dispatch:

env:
  CUDA_DEVICE_ORDER: PCI_BUS_ID

jobs:
  build:
    runs-on: self-hosted
    container:
      image: modelcloud/gptqmodel:github-ci-v1
    steps:
      - name: Checkout Codes
        uses: actions/checkout@v4

      - name: Compile
        run: python setup.py bdist_wheel

      - name: Show dist folder
        run: ls -alh dist

      - name: Upload to artifact
        uses: actions/upload-artifact@v4
        with:
          name: dist
          path: dist


  test:
    needs: build
    runs-on: self-hosted
    container:
      image: modelcloud/gptqmodel:github-ci-v1
    strategy:
      fail-fast: false
      matrix:
        test-group:
          - gpu_group1
          - gpu_group2
    steps:
      - name: Download artifact
        uses: actions/download-artifact@v4
        with:
          name: dist
          path: dist

      - name: Show dist folder
        run: ls -alh dist

      - name: Install wheel
        run: |
          # install only the last version
          pip install dist/*.whl

      - name: Find suitable GPU
        run: |
         suitable_gpu=$(nvidia-smi -L | grep "RTX 4090" | awk -F': ' '{print $1}' | sed 's/GPU //g' | while read gpu_id
          do
            mem_total=$(nvidia-smi --query-gpu=memory.total --format=csv,noheader,nounits -i $gpu_id)
            mem_used=$(nvidia-smi --query-gpu=memory.used --format=csv,noheader,nounits -i $gpu_id)
            mem_used_pct=$((100 * mem_used / mem_total))
            if [ $mem_used_pct -lt 2 ]; then # 2 -> 98% free
              echo $gpu_id
              break
            fi
          done)
          if [ -z "$suitable_gpu" ]; then
            echo "No suitable GPU found. Exiting with error."
            exit 1
          else
            echo "CUDA_VISIBLE_DEVICES=$suitable_gpu" >> $GITHUB_ENV
            echo "CUDA_VISIBLE_DEVICES set to $suitable_gpu"
          fi

      - name: Run tests group 1
        if: matrix.test-group == 'gpu_group1'
        run: pytest tests/test_perplexity.py

      - name: Run tests group 2
        if: matrix.test-group == 'gpu_group2'
        shell: bash
        run: |
          run_log_success=()
          run_log_fail=()
          
          run_test() {
              start_time=$(date +%s)
              echo -e "\033[1;34mRunning $1...\033[0m"
              echo "========================================"
          
              ls tests/$1
              result=$?
          
              end_time=$(date +%s)
              duration=$((end_time - start_time))
          
              echo -e "========================================\n\n\n"
              log_entry="$1,$duration,$result"
              if [ "$result" -eq 0 ]; then
                  run_log_success+=("$log_entry")
              else
                  run_log_fail+=("$log_entry")
              fi
          }
          
          run_test test_lm_head.py
          run_test test_q4_exallama.py
          run_test test_q4_exallama_v2.py
          run_test test_q4_marlin.py
          run_test test_q4_triton.py
          run_test test_repacking.py
          run_test test_serialization.py
          run_test test_sharded.py
          run_test test_triton.py
          run_test 123213123
          run_test test_quant_formats.py
          run_test test_q4_cuda.py
          run_test test_q4_bitblas.py
          
          max_length=0
          for log in "${run_log_success[@]}" "${run_log_fail[@]}"; do
              IFS=',' read -r test_name duration result <<< "$log"
              length=${#test_name}
              if [[ $length -gt $max_length ]]; then
                  max_length=$length
              fi
          done
          
          save_log() {
              for log in "$@"; do
                  IFS=',' read -r test_name duration result <<< "$log"
                  color_code="\033[0;32m"
                  result_text="Succeed"
                  if [ "$result" -ne 0 ]; then
                      color_code="\033[0;31m"
                      result_text="Failed"
                  fi
                  printf "$color_code%-*s\tDuration: %4ds\tResult: $result_text\033[0m\n" $((max_length + 4)) "$test_name" $duration >> log.log
              done
          }
          
          # Save to log file
          save_log "${run_log_success[@]}"
          save_log "${run_log_fail[@]}"

      - name: Print log
        if: matrix.test-group == 'gpu_group2'
        shell: bash
        run: |
          echo -e "\nTest Results:"
          cat log.log


